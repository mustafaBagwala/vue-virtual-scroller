{"version":3,"file":"vue-virtual-scroller.esm.js","sources":["../src/config.js","../src/utils.js","../src/components/common.js","../src/components/RecycleScroller.vue","../src/components/DynamicScroller.vue","../src/components/DynamicScrollerItem.vue","../src/mixins/IdState.js","../src/index.js"],"sourcesContent":["export default {\r\n  itemsLimit: 1000,\r\n}\r\n","export let supportsPassive = false\r\n\r\nif (typeof window !== 'undefined') {\r\n  supportsPassive = false\r\n  try {\r\n    var opts = Object.defineProperty({}, 'passive', {\r\n      get () {\r\n        supportsPassive = true\r\n      },\r\n    })\r\n    window.addEventListener('test', null, opts)\r\n  } catch (e) {}\r\n}\r\n","export const props = {\r\n  items: {\r\n    type: Array,\r\n    required: true,\r\n  },\r\n\r\n  keyField: {\r\n    type: String,\r\n    default: 'id',\r\n  },\r\n\r\n  direction: {\r\n    type: String,\r\n    default: 'vertical',\r\n    validator: (value) => ['vertical', 'horizontal'].includes(value),\r\n  },\r\n\r\n  listTag: {\r\n    type: String,\r\n    default: 'div',\r\n  },\r\n\r\n  itemTag: {\r\n    type: String,\r\n    default: 'div',\r\n  },\r\n}\r\n\r\nexport function simpleArray () {\r\n  return this.items.length && typeof this.items[0] !== 'object'\r\n}\r\n","<template>\r\n  <div\r\n    v-observe-visibility=\"handleVisibilityChange\"\r\n    class=\"vue-recycle-scroller\"\r\n    :class=\"{\r\n      ready,\r\n      'page-mode': pageMode,\r\n      [`direction-${direction}`]: true,\r\n    }\"\r\n    @scroll.passive=\"handleScroll\"\r\n  >\r\n    <div\r\n      v-if=\"$slots.before\"\r\n      ref=\"before\"\r\n      class=\"vue-recycle-scroller__slot\"\r\n    >\r\n      <slot\r\n        name=\"before\"\r\n      />\r\n    </div>\r\n\r\n    <component\r\n      :is=\"listTag\"\r\n      ref=\"wrapper\"\r\n      :style=\"{ [direction === 'vertical' ? 'minHeight' : 'minWidth']: totalSize + 'px' }\"\r\n      class=\"vue-recycle-scroller__item-wrapper\"\r\n      :class=\"listClass\"\r\n    >\r\n      <component\r\n        :is=\"itemTag\"\r\n        v-for=\"view of pool\"\r\n        :key=\"view.nr.id\"\r\n        :style=\"ready\r\n          ? [\r\n            (disableTransform\r\n              ? { [direction === 'vertical' ? 'top' : 'left'] : `${view.position}px`, willChange: 'unset' }\r\n              : { transform: `translate${direction === 'vertical' ? 'Y' : 'X'}(${view.position}px) translate${direction === 'vertical' ? 'X' : 'Y'}(${view.offset}px)` }),\r\n            {\r\n              width: gridItems ? `${direction === 'vertical' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\r\n              height: gridItems ? `${direction === 'horizontal' ? itemSecondarySize || itemSize : itemSize}px` : undefined,\r\n            }\r\n          ]\r\n          : null\"\r\n        class=\"vue-recycle-scroller__item-view\"\r\n        :class=\"[\r\n          itemClass,\r\n          {\r\n            hover: !skipHover && hoverKey === view.nr.key\r\n          },\r\n        ]\"\r\n        v-on=\"skipHover ? {} : {\r\n          mouseenter: () => { hoverKey = view.nr.key },\r\n          mouseleave: () => { hoverKey = null },\r\n        }\"\r\n      >\r\n        <slot\r\n          :item=\"view.item\"\r\n          :index=\"view.nr.index\"\r\n          :active=\"view.nr.used\"\r\n        />\r\n      </component>\r\n\r\n      <slot\r\n        name=\"empty\"\r\n      />\r\n    </component>\r\n\r\n    <div\r\n      v-if=\"$slots.after\"\r\n      ref=\"after\"\r\n      class=\"vue-recycle-scroller__slot\"\r\n    >\r\n      <slot\r\n        name=\"after\"\r\n      />\r\n    </div>\r\n\r\n    <ResizeObserver @notify=\"handleResize\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ScrollParent from 'scrollparent'\r\nimport { ObserveVisibility } from 'vue-observe-visibility'\r\nimport { ResizeObserver } from 'vue-resize'\r\nimport config from '../config'\r\nimport { supportsPassive } from '../utils'\r\nimport { props, simpleArray } from './common'\r\n\r\nlet uid = 0\r\n\r\nexport default {\r\n  name: 'RecycleScroller',\r\n\r\n  components: {\r\n    ResizeObserver,\r\n  },\r\n\r\n  directives: {\r\n    ObserveVisibility,\r\n  },\r\n\r\n  props: {\r\n    ...props,\r\n    disableTransform: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    itemSize: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    gridItems: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\r\n    itemSecondarySize: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\r\n    minItemSize: {\r\n      type: [Number, String],\r\n      default: null,\r\n    },\r\n\r\n    sizeField: {\r\n      type: String,\r\n      default: 'size',\r\n    },\r\n\r\n    typeField: {\r\n      type: String,\r\n      default: 'type',\r\n    },\r\n\r\n    buffer: {\r\n      type: Number,\r\n      default: 200,\r\n    },\r\n\r\n    pageMode: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    prerender: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    emitUpdate: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    skipHover: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    listTag: {\r\n      type: String,\r\n      default: 'div',\r\n    },\r\n\r\n    itemTag: {\r\n      type: String,\r\n      default: 'div',\r\n    },\r\n\r\n    listClass: {\r\n      type: [String, Object, Array],\r\n      default: '',\r\n    },\r\n\r\n    itemClass: {\r\n      type: [String, Object, Array],\r\n      default: '',\r\n    },\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      pool: [],\r\n      totalSize: 0,\r\n      ready: false,\r\n      hoverKey: null,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    sizes () {\r\n      if (this.itemSize === null) {\r\n        const sizes = {\r\n          '-1': { accumulator: 0 },\r\n        }\r\n        const items = this.items\r\n        const field = this.sizeField\r\n        const minItemSize = this.minItemSize\r\n        let computedMinSize = 10000\r\n        let accumulator = 0\r\n        let current\r\n        for (let i = 0, l = items.length; i < l; i++) {\r\n          current = items[i][field] || minItemSize\r\n          if (current < computedMinSize) {\r\n            computedMinSize = current\r\n          }\r\n          accumulator += current\r\n          sizes[i] = { accumulator, size: current }\r\n        }\r\n        // eslint-disable-next-line\r\n        this.$_computedMinItemSize = computedMinSize\r\n        return sizes\r\n      }\r\n      return []\r\n    },\r\n\r\n    simpleArray,\r\n  },\r\n\r\n  watch: {\r\n    items () {\r\n      this.updateVisibleItems(true)\r\n    },\r\n\r\n    pageMode () {\r\n      this.applyPageMode()\r\n      this.updateVisibleItems(false)\r\n    },\r\n\r\n    sizes: {\r\n      handler () {\r\n        this.updateVisibleItems(false)\r\n      },\r\n      deep: true,\r\n    },\r\n\r\n    gridItems () {\r\n      this.updateVisibleItems(true)\r\n    },\r\n\r\n    itemSecondarySize () {\r\n      this.updateVisibleItems(true)\r\n    },\r\n  },\r\n\r\n  created () {\r\n    this.$_startIndex = 0\r\n    this.$_endIndex = 0\r\n    this.$_views = new Map()\r\n    this.$_unusedViews = new Map()\r\n    this.$_scrollDirty = false\r\n    this.$_lastUpdateScrollPosition = 0\r\n\r\n    // In SSR mode, we also prerender the same number of item for the first render\r\n    // to avoir mismatch between server and client templates\r\n    if (this.prerender) {\r\n      this.$_prerender = true\r\n      this.updateVisibleItems(false)\r\n    }\r\n\r\n    if (this.gridItems && !this.itemSize) {\r\n      console.error('[vue-recycle-scroller] You must provide an itemSize when using gridItems')\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.applyPageMode()\r\n    this.$nextTick(() => {\r\n      // In SSR mode, render the real number of visible items\r\n      this.$_prerender = false\r\n      this.updateVisibleItems(true)\r\n      this.ready = true\r\n    })\r\n  },\r\n\r\n  activated () {\r\n    const lastPosition = this.$_lastUpdateScrollPosition\r\n    if (typeof lastPosition === 'number') {\r\n      this.$nextTick(() => {\r\n        this.scrollToPosition(lastPosition)\r\n      })\r\n    }\r\n  },\r\n\r\n  beforeDestroy () {\r\n    this.removeListeners()\r\n  },\r\n\r\n  methods: {\r\n    addView (pool, index, item, key, type) {\r\n      const view = {\r\n        item,\r\n        position: 0,\r\n      }\r\n      const nonReactive = {\r\n        id: uid++,\r\n        index,\r\n        used: true,\r\n        key,\r\n        type,\r\n      }\r\n      Object.defineProperty(view, 'nr', {\r\n        configurable: false,\r\n        value: nonReactive,\r\n      })\r\n      pool.push(view)\r\n      return view\r\n    },\r\n\r\n    unuseView (view, fake = false) {\r\n      const unusedViews = this.$_unusedViews\r\n      const type = view.nr.type\r\n      let unusedPool = unusedViews.get(type)\r\n      if (!unusedPool) {\r\n        unusedPool = []\r\n        unusedViews.set(type, unusedPool)\r\n      }\r\n      unusedPool.push(view)\r\n      if (!fake) {\r\n        view.nr.used = false\r\n        view.position = -9999\r\n        this.$_views.delete(view.nr.key)\r\n      }\r\n    },\r\n\r\n    handleResize () {\r\n      this.$emit('resize')\r\n      if (this.ready) this.updateVisibleItems(false)\r\n    },\r\n\r\n    handleScroll (event) {\r\n      if (!this.$_scrollDirty) {\r\n        this.$_scrollDirty = true\r\n        requestAnimationFrame(() => {\r\n          this.$_scrollDirty = false\r\n          const { continuous } = this.updateVisibleItems(false, true)\r\n\r\n          // It seems sometimes chrome doesn't fire scroll event :/\r\n          // When non continous scrolling is ending, we force a refresh\r\n          if (!continuous) {\r\n            clearTimeout(this.$_refreshTimout)\r\n            this.$_refreshTimout = setTimeout(this.handleScroll, 100)\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n    handleVisibilityChange (isVisible, entry) {\r\n      if (this.ready) {\r\n        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {\r\n          this.$emit('visible')\r\n          requestAnimationFrame(() => {\r\n            this.updateVisibleItems(false)\r\n          })\r\n        } else {\r\n          this.$emit('hidden')\r\n        }\r\n      }\r\n    },\r\n\r\n    updateVisibleItems (checkItem, checkPositionDiff = false) {\r\n      const itemSize = this.itemSize\r\n      const gridItems = this.gridItems || 1\r\n      const itemSecondarySize = this.itemSecondarySize || itemSize\r\n      const minItemSize = this.$_computedMinItemSize\r\n      const typeField = this.typeField\r\n      const keyField = this.simpleArray ? null : this.keyField\r\n      const items = this.items\r\n      const count = items.length\r\n      const sizes = this.sizes\r\n      const views = this.$_views\r\n      const unusedViews = this.$_unusedViews\r\n      const pool = this.pool\r\n      let startIndex, endIndex\r\n      let totalSize\r\n      let visibleStartIndex, visibleEndIndex\r\n\r\n      if (!count) {\r\n        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0\r\n      } else if (this.$_prerender) {\r\n        startIndex = visibleStartIndex = 0\r\n        endIndex = visibleEndIndex = Math.min(this.prerender, items.length)\r\n        totalSize = null\r\n      } else {\r\n        const scroll = this.getScroll()\r\n\r\n        // Skip update if use hasn't scrolled enough\r\n        if (checkPositionDiff) {\r\n          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition\r\n          if (positionDiff < 0) positionDiff = -positionDiff\r\n          if ((itemSize === null && positionDiff < minItemSize) || positionDiff < itemSize) {\r\n            return {\r\n              continuous: true,\r\n            }\r\n          }\r\n        }\r\n        this.$_lastUpdateScrollPosition = scroll.start\r\n\r\n        const buffer = this.buffer\r\n        scroll.start -= buffer\r\n        scroll.end += buffer\r\n\r\n        // account for leading slot\r\n        let beforeSize = 0\r\n        if (this.$refs.before) {\r\n          beforeSize = this.$refs.before.scrollHeight\r\n          scroll.start -= beforeSize\r\n        }\r\n\r\n        // account for trailing slot\r\n        if (this.$refs.after) {\r\n          const afterSize = this.$refs.after.scrollHeight\r\n          scroll.end += afterSize\r\n        }\r\n\r\n        // Variable size mode\r\n        if (itemSize === null) {\r\n          let h\r\n          let a = 0\r\n          let b = count - 1\r\n          let i = ~~(count / 2)\r\n          let oldI\r\n\r\n          // Searching for startIndex\r\n          do {\r\n            oldI = i\r\n            h = sizes[i].accumulator\r\n            if (h < scroll.start) {\r\n              a = i\r\n            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {\r\n              b = i\r\n            }\r\n            i = ~~((a + b) / 2)\r\n          } while (i !== oldI)\r\n          i < 0 && (i = 0)\r\n          startIndex = i\r\n\r\n          // For container style\r\n          totalSize = sizes[count - 1].accumulator\r\n\r\n          // Searching for endIndex\r\n          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++);\r\n          if (endIndex === -1) {\r\n            endIndex = items.length - 1\r\n          } else {\r\n            endIndex++\r\n            // Bounds\r\n            endIndex > count && (endIndex = count)\r\n          }\r\n\r\n          // search visible startIndex\r\n          for (visibleStartIndex = startIndex; visibleStartIndex < count && (beforeSize + sizes[visibleStartIndex].accumulator) < scroll.start; visibleStartIndex++);\r\n\r\n          // search visible endIndex\r\n          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && (beforeSize + sizes[visibleEndIndex].accumulator) < scroll.end; visibleEndIndex++);\r\n        } else {\r\n          // Fixed size mode\r\n          startIndex = ~~(scroll.start / itemSize * gridItems)\r\n          const remainer = startIndex % gridItems\r\n          startIndex -= remainer\r\n          endIndex = Math.ceil(scroll.end / itemSize * gridItems)\r\n          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems))\r\n          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems)\r\n\r\n          // Bounds\r\n          startIndex < 0 && (startIndex = 0)\r\n          endIndex > count && (endIndex = count)\r\n          visibleStartIndex < 0 && (visibleStartIndex = 0)\r\n          visibleEndIndex > count && (visibleEndIndex = count)\r\n\r\n          totalSize = Math.ceil(count / gridItems) * itemSize\r\n        }\r\n      }\r\n\r\n      if (endIndex - startIndex > config.itemsLimit) {\r\n        this.itemsLimitError()\r\n      }\r\n\r\n      this.totalSize = totalSize\r\n\r\n      let view\r\n\r\n      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex\r\n\r\n      if (this.$_continuous !== continuous) {\r\n        if (continuous) {\r\n          views.clear()\r\n          unusedViews.clear()\r\n          for (let i = 0, l = pool.length; i < l; i++) {\r\n            view = pool[i]\r\n            this.unuseView(view)\r\n          }\r\n        }\r\n        this.$_continuous = continuous\r\n      } else if (continuous) {\r\n        for (let i = 0, l = pool.length; i < l; i++) {\r\n          view = pool[i]\r\n          if (view.nr.used) {\r\n            // Update view item index\r\n            if (checkItem) {\r\n              view.nr.index = items.indexOf(view.item)\r\n            }\r\n\r\n            // Check if index is still in visible range\r\n            if (\r\n              view.nr.index === -1 ||\r\n              view.nr.index < startIndex ||\r\n              view.nr.index >= endIndex\r\n            ) {\r\n              this.unuseView(view)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      const unusedIndex = continuous ? null : new Map()\r\n\r\n      let item, type, unusedPool\r\n      let v\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        item = items[i]\r\n        const key = keyField ? item[keyField] : item\r\n        if (key == null) {\r\n          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`)\r\n        }\r\n        view = views.get(key)\r\n\r\n        if (!itemSize && !sizes[i].size) {\r\n          if (view) this.unuseView(view)\r\n          continue\r\n        }\r\n\r\n        // No view assigned to item\r\n        if (!view) {\r\n          if (i === items.length - 1) this.$emit('scroll-end')\r\n          if (i === 0) this.$emit('scroll-start')\r\n\r\n          type = item[typeField]\r\n          unusedPool = unusedViews.get(type)\r\n\r\n          if (continuous) {\r\n            // Reuse existing view\r\n            if (unusedPool && unusedPool.length) {\r\n              view = unusedPool.pop()\r\n              view.item = item\r\n              view.nr.used = true\r\n              view.nr.index = i\r\n              view.nr.key = key\r\n              view.nr.type = type\r\n            } else {\r\n              view = this.addView(pool, i, item, key, type)\r\n            }\r\n          } else {\r\n            // Use existing view\r\n            // We don't care if they are already used\r\n            // because we are not in continous scrolling\r\n            v = unusedIndex.get(type) || 0\r\n\r\n            if (!unusedPool || v >= unusedPool.length) {\r\n              view = this.addView(pool, i, item, key, type)\r\n              this.unuseView(view, true)\r\n              unusedPool = unusedViews.get(type)\r\n            }\r\n\r\n            view = unusedPool[v]\r\n            view.item = item\r\n            view.nr.used = true\r\n            view.nr.index = i\r\n            view.nr.key = key\r\n            view.nr.type = type\r\n            unusedIndex.set(type, v + 1)\r\n            v++\r\n          }\r\n          views.set(key, view)\r\n        } else {\r\n          view.nr.used = true\r\n          view.item = item\r\n        }\r\n\r\n        // Update position\r\n        if (itemSize === null) {\r\n          view.position = sizes[i - 1].accumulator\r\n          view.offset = 0\r\n        } else {\r\n          view.position = Math.floor(i / gridItems) * itemSize\r\n          view.offset = (i % gridItems) * itemSecondarySize\r\n        }\r\n      }\r\n\r\n      this.$_startIndex = startIndex\r\n      this.$_endIndex = endIndex\r\n\r\n      if (this.emitUpdate) this.$emit('update', startIndex, endIndex, visibleStartIndex, visibleEndIndex)\r\n\r\n      // After the user has finished scrolling\r\n      // Sort views so text selection is correct\r\n      clearTimeout(this.$_sortTimer)\r\n      this.$_sortTimer = setTimeout(this.sortViews, 300)\r\n\r\n      return {\r\n        continuous,\r\n      }\r\n    },\r\n\r\n    getListenerTarget () {\r\n      let target = ScrollParent(this.$el)\r\n      // Fix global scroll target for Chrome and Safari\r\n      if (window.document && (target === window.document.documentElement || target === window.document.body)) {\r\n        target = window\r\n      }\r\n      return target\r\n    },\r\n\r\n    getScroll () {\r\n      const { $el: el, direction } = this\r\n      const isVertical = direction === 'vertical'\r\n      let scrollState\r\n\r\n      if (this.pageMode) {\r\n        const bounds = el.getBoundingClientRect()\r\n        const boundsSize = isVertical ? bounds.height : bounds.width\r\n        let start = -(isVertical ? bounds.top : bounds.left)\r\n        let size = isVertical ? window.innerHeight : window.innerWidth\r\n        if (start < 0) {\r\n          size += start\r\n          start = 0\r\n        }\r\n        if (start + size > boundsSize) {\r\n          size = boundsSize - start\r\n        }\r\n        scrollState = {\r\n          start,\r\n          end: start + size,\r\n        }\r\n      } else if (isVertical) {\r\n        scrollState = {\r\n          start: el.scrollTop,\r\n          end: el.scrollTop + el.clientHeight,\r\n        }\r\n      } else {\r\n        scrollState = {\r\n          start: el.scrollLeft,\r\n          end: el.scrollLeft + el.clientWidth,\r\n        }\r\n      }\r\n\r\n      return scrollState\r\n    },\r\n\r\n    applyPageMode () {\r\n      if (this.pageMode) {\r\n        this.addListeners()\r\n      } else {\r\n        this.removeListeners()\r\n      }\r\n    },\r\n\r\n    addListeners () {\r\n      this.listenerTarget = this.getListenerTarget()\r\n      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive\r\n        ? {\r\n            passive: true,\r\n          }\r\n        : false)\r\n      this.listenerTarget.addEventListener('resize', this.handleResize)\r\n    },\r\n\r\n    removeListeners () {\r\n      if (!this.listenerTarget) {\r\n        return\r\n      }\r\n\r\n      this.listenerTarget.removeEventListener('scroll', this.handleScroll)\r\n      this.listenerTarget.removeEventListener('resize', this.handleResize)\r\n\r\n      this.listenerTarget = null\r\n    },\r\n\r\n    scrollToItem (index) {\r\n      let scroll\r\n      if (this.itemSize === null) {\r\n        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0\r\n      } else {\r\n        scroll = Math.floor(index / this.gridItems) * this.itemSize\r\n      }\r\n      this.scrollToPosition(scroll)\r\n    },\r\n\r\n    scrollToPosition (position) {\r\n      const direction = this.direction === 'vertical'\r\n        ? { scroll: 'scrollTop', start: 'top' }\r\n        : { scroll: 'scrollLeft', start: 'left' }\r\n\r\n      let viewport\r\n      let scrollDirection\r\n      let scrollDistance\r\n\r\n      if (this.pageMode) {\r\n        const viewportEl = ScrollParent(this.$el)\r\n        // HTML doesn't overflow like other elements\r\n        const scrollTop = viewportEl.tagName === 'HTML' ? 0 : viewportEl[direction.scroll]\r\n        const bounds = viewportEl.getBoundingClientRect()\r\n\r\n        const scroller = this.$el.getBoundingClientRect()\r\n        const scrollerPosition = scroller[direction.start] - bounds[direction.start]\r\n\r\n        viewport = viewportEl\r\n        scrollDirection = direction.scroll\r\n        scrollDistance = position + scrollTop + scrollerPosition\r\n      } else {\r\n        viewport = this.$el\r\n        scrollDirection = direction.scroll\r\n        scrollDistance = position\r\n      }\r\n\r\n      viewport[scrollDirection] = scrollDistance\r\n    },\r\n\r\n    itemsLimitError () {\r\n      setTimeout(() => {\r\n        console.log('It seems the scroller element isn\\'t scrolling, so it tries to render all the items at once.', 'Scroller:', this.$el)\r\n        console.log('Make sure the scroller has a fixed height (or width) and \\'overflow-y\\' (or \\'overflow-x\\') set to \\'auto\\' so it can scroll correctly and only render the items visible in the scroll viewport.')\r\n      })\r\n      throw new Error('Rendered items limit reached')\r\n    },\r\n\r\n    sortViews () {\r\n      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n.vue-recycle-scroller {\r\n  position: relative;\r\n}\r\n\r\n.vue-recycle-scroller.direction-vertical:not(.page-mode) {\r\n  overflow-y: auto;\r\n}\r\n\r\n.vue-recycle-scroller.direction-horizontal:not(.page-mode) {\r\n  overflow-x: auto;\r\n}\r\n\r\n.vue-recycle-scroller.direction-horizontal {\r\n  display: flex;\r\n}\r\n\r\n.vue-recycle-scroller__slot {\r\n  flex: auto 0 0;\r\n}\r\n\r\n.vue-recycle-scroller__item-wrapper {\r\n  flex: 1;\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n\r\n.vue-recycle-scroller.ready .vue-recycle-scroller__item-view {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  will-change: transform;\r\n}\r\n\r\n.vue-recycle-scroller.direction-vertical .vue-recycle-scroller__item-wrapper {\r\n  width: 100%;\r\n}\r\n\r\n.vue-recycle-scroller.direction-horizontal .vue-recycle-scroller__item-wrapper {\r\n  height: 100%;\r\n}\r\n\r\n.vue-recycle-scroller.ready.direction-vertical .vue-recycle-scroller__item-view {\r\n  width: 100%;\r\n}\r\n\r\n.vue-recycle-scroller.ready.direction-horizontal .vue-recycle-scroller__item-view {\r\n  height: 100%;\r\n}\r\n</style>\r\n","<template>\r\n  <RecycleScroller\r\n    ref=\"scroller\"\r\n    :items=\"itemsWithSize\"\r\n    :min-item-size=\"minItemSize\"\r\n    :direction=\"direction\"\r\n    key-field=\"id\"\r\n    :list-tag=\"listTag\"\r\n    :item-tag=\"itemTag\"\r\n    v-bind=\"$attrs\"\r\n    @resize=\"onScrollerResize\"\r\n    @visible=\"onScrollerVisible\"\r\n    v-on=\"listeners\"\r\n  >\r\n    <template slot-scope=\"{ item: itemWithSize, index, active }\">\r\n      <slot\r\n        v-bind=\"{\r\n          item: itemWithSize.item,\r\n          index,\r\n          active,\r\n          itemWithSize\r\n        }\"\r\n      />\r\n    </template>\r\n    <template slot=\"before\">\r\n      <slot name=\"before\" />\r\n    </template>\r\n    <template slot=\"after\">\r\n      <slot name=\"after\" />\r\n    </template>\r\n    <template slot=\"empty\">\r\n      <slot name=\"empty\" />\r\n    </template>\r\n  </RecycleScroller>\r\n</template>\r\n\r\n<script>\r\nimport RecycleScroller from './RecycleScroller.vue'\r\nimport { props, simpleArray } from './common'\r\n\r\nexport default {\r\n  name: 'DynamicScroller',\r\n\r\n  components: {\r\n    RecycleScroller,\r\n  },\r\n\r\n  provide () {\r\n    if (typeof ResizeObserver !== 'undefined') {\r\n      this.$_resizeObserver = new ResizeObserver(entries => {\r\n        requestAnimationFrame(() => {\r\n          if (!Array.isArray(entries)) {\r\n            return\r\n          }\r\n          for (const entry of entries) {\r\n            if (entry.target) {\r\n              const event = new CustomEvent(\r\n                'resize',\r\n                {\r\n                  detail: {\r\n                    contentRect: entry.contentRect,\r\n                  },\r\n                },\r\n              )\r\n              entry.target.dispatchEvent(event)\r\n            }\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    return {\r\n      vscrollData: this.vscrollData,\r\n      vscrollParent: this,\r\n      vscrollResizeObserver: this.$_resizeObserver,\r\n    }\r\n  },\r\n\r\n  inheritAttrs: false,\r\n\r\n  props: {\r\n    ...props,\r\n\r\n    minItemSize: {\r\n      type: [Number, String],\r\n      required: true,\r\n    },\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      vscrollData: {\r\n        active: true,\r\n        sizes: {},\r\n        validSizes: {},\r\n        keyField: this.keyField,\r\n        simpleArray: false,\r\n      },\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    simpleArray,\r\n\r\n    itemsWithSize () {\r\n      const result = []\r\n      const { items, keyField, simpleArray } = this\r\n      const sizes = this.vscrollData.sizes\r\n      const l = items.length\r\n      for (let i = 0; i < l; i++) {\r\n        const item = items[i]\r\n        const id = simpleArray ? i : item[keyField]\r\n        let size = sizes[id]\r\n        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {\r\n          size = 0\r\n        }\r\n        result.push({\r\n          item,\r\n          id,\r\n          size,\r\n        })\r\n      }\r\n      return result\r\n    },\r\n\r\n    listeners () {\r\n      const listeners = {}\r\n      for (const key in this.$listeners) {\r\n        if (key !== 'resize' && key !== 'visible') {\r\n          listeners[key] = this.$listeners[key]\r\n        }\r\n      }\r\n      return listeners\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    items () {\r\n      this.forceUpdate(false)\r\n    },\r\n\r\n    simpleArray: {\r\n      handler (value) {\r\n        this.vscrollData.simpleArray = value\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    direction (value) {\r\n      this.forceUpdate(true)\r\n    },\r\n\r\n    itemsWithSize (next, prev) {\r\n      const scrollTop = this.$el.scrollTop\r\n\r\n      // Calculate total diff between prev and next sizes\r\n      // over current scroll top. Then add it to scrollTop to\r\n      // avoid jumping the contents that the user is seeing.\r\n      let prevActiveTop = 0; let activeTop = 0\r\n      const length = Math.min(next.length, prev.length)\r\n      for (let i = 0; i < length; i++) {\r\n        if (prevActiveTop >= scrollTop) {\r\n          break\r\n        }\r\n        prevActiveTop += prev[i].size || this.minItemSize\r\n        activeTop += next[i].size || this.minItemSize\r\n      }\r\n      const offset = activeTop - prevActiveTop\r\n\r\n      if (offset === 0) {\r\n        return\r\n      }\r\n\r\n      this.$el.scrollTop += offset\r\n    },\r\n  },\r\n\r\n  beforeCreate () {\r\n    this.$_updates = []\r\n    this.$_undefinedSizes = 0\r\n    this.$_undefinedMap = {}\r\n  },\r\n\r\n  activated () {\r\n    this.vscrollData.active = true\r\n  },\r\n\r\n  deactivated () {\r\n    this.vscrollData.active = false\r\n  },\r\n\r\n  methods: {\r\n    onScrollerResize () {\r\n      const scroller = this.$refs.scroller\r\n      if (scroller) {\r\n        this.forceUpdate()\r\n      }\r\n      this.$emit('resize')\r\n    },\r\n\r\n    onScrollerVisible () {\r\n      this.$emit('vscroll:update', { force: false })\r\n      this.$emit('visible')\r\n    },\r\n\r\n    forceUpdate (clear = true) {\r\n      if (clear || this.simpleArray) {\r\n        this.vscrollData.validSizes = {}\r\n      }\r\n      this.$emit('vscroll:update', { force: true })\r\n    },\r\n\r\n    scrollToItem (index) {\r\n      const scroller = this.$refs.scroller\r\n      if (scroller) scroller.scrollToItem(index)\r\n    },\r\n\r\n    getItemSize (item, index = undefined) {\r\n      const id = this.simpleArray ? (index != null ? index : this.items.indexOf(item)) : item[this.keyField]\r\n      return this.vscrollData.sizes[id] || 0\r\n    },\r\n\r\n    scrollToBottom () {\r\n      if (this.$_scrollingToBottom) return\r\n      this.$_scrollingToBottom = true\r\n      const el = this.$el\r\n      // Item is inserted to the DOM\r\n      this.$nextTick(() => {\r\n        el.scrollTop = el.scrollHeight + 5000\r\n        // Item sizes are computed\r\n        const cb = () => {\r\n          el.scrollTop = el.scrollHeight + 5000\r\n          requestAnimationFrame(() => {\r\n            el.scrollTop = el.scrollHeight + 5000\r\n            if (this.$_undefinedSizes === 0) {\r\n              this.$_scrollingToBottom = false\r\n            } else {\r\n              requestAnimationFrame(cb)\r\n            }\r\n          })\r\n        }\r\n        requestAnimationFrame(cb)\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n","<script>\r\nexport default {\r\n  name: 'DynamicScrollerItem',\r\n\r\n  inject: [\r\n    'vscrollData',\r\n    'vscrollParent',\r\n    'vscrollResizeObserver',\r\n  ],\r\n\r\n  props: {\r\n    // eslint-disable-next-line vue/require-prop-types\r\n    item: {\r\n      required: true,\r\n    },\r\n\r\n    watchData: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    /**\r\n     * Indicates if the view is actively used to display an item.\r\n     */\r\n    active: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n\r\n    index: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\r\n    sizeDependencies: {\r\n      type: [Array, Object],\r\n      default: null,\r\n    },\r\n\r\n    emitResize: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    tag: {\r\n      type: String,\r\n      default: 'div',\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    id () {\r\n      if (this.vscrollData.simpleArray) return this.index\r\n      // eslint-disable-next-line no-prototype-builtins\r\n      if (this.item.hasOwnProperty(this.vscrollData.keyField)) return this.item[this.vscrollData.keyField]\r\n      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`)\r\n    },\r\n\r\n    size () {\r\n      return (this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id]) || 0\r\n    },\r\n\r\n    finalActive () {\r\n      return this.active && this.vscrollData.active\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    watchData: 'updateWatchData',\r\n\r\n    id () {\r\n      if (!this.size) {\r\n        this.onDataUpdate()\r\n      }\r\n    },\r\n\r\n    finalActive (value) {\r\n      if (!this.size) {\r\n        if (value) {\r\n          if (!this.vscrollParent.$_undefinedMap[this.id]) {\r\n            this.vscrollParent.$_undefinedSizes++\r\n            this.vscrollParent.$_undefinedMap[this.id] = true\r\n          }\r\n        } else {\r\n          if (this.vscrollParent.$_undefinedMap[this.id]) {\r\n            this.vscrollParent.$_undefinedSizes--\r\n            this.vscrollParent.$_undefinedMap[this.id] = false\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.vscrollResizeObserver) {\r\n        if (value) {\r\n          this.observeSize()\r\n        } else {\r\n          this.unobserveSize()\r\n        }\r\n      } else if (value && this.$_pendingVScrollUpdate === this.id) {\r\n        this.updateSize()\r\n      }\r\n    },\r\n  },\r\n\r\n  created () {\r\n    if (this.$isServer) return\r\n\r\n    this.$_forceNextVScrollUpdate = null\r\n    this.updateWatchData()\r\n\r\n    if (!this.vscrollResizeObserver) {\r\n      for (const k in this.sizeDependencies) {\r\n        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate)\r\n      }\r\n\r\n      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate)\r\n      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize)\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    if (this.vscrollData.active) {\r\n      this.updateSize()\r\n      this.observeSize()\r\n    }\r\n  },\r\n\r\n  beforeDestroy () {\r\n    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate)\r\n    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize)\r\n    this.unobserveSize()\r\n  },\r\n\r\n  methods: {\r\n    updateSize () {\r\n      if (this.finalActive) {\r\n        if (this.$_pendingSizeUpdate !== this.id) {\r\n          this.$_pendingSizeUpdate = this.id\r\n          this.$_forceNextVScrollUpdate = null\r\n          this.$_pendingVScrollUpdate = null\r\n          this.computeSize(this.id)\r\n        }\r\n      } else {\r\n        this.$_forceNextVScrollUpdate = this.id\r\n      }\r\n    },\r\n\r\n    updateWatchData () {\r\n      if (this.watchData && !this.vscrollResizeObserver) {\r\n        this.$_watchData = this.$watch('item', () => {\r\n          this.onDataUpdate()\r\n        }, {\r\n          deep: true,\r\n        })\r\n      } else if (this.$_watchData) {\r\n        this.$_watchData()\r\n        this.$_watchData = null\r\n      }\r\n    },\r\n\r\n    onVscrollUpdate ({ force }) {\r\n      // If not active, sechedule a size update when it becomes active\r\n      if (!this.finalActive && force) {\r\n        this.$_pendingVScrollUpdate = this.id\r\n      }\r\n\r\n      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {\r\n        this.updateSize()\r\n      }\r\n    },\r\n\r\n    onDataUpdate () {\r\n      this.updateSize()\r\n    },\r\n\r\n    computeSize (id) {\r\n      this.$nextTick(() => {\r\n        if (this.id === id) {\r\n          const width = this.$el.offsetWidth\r\n          const height = this.$el.offsetHeight\r\n          this.applySize(width, height)\r\n        }\r\n        this.$_pendingSizeUpdate = null\r\n      })\r\n    },\r\n\r\n    applySize (width, height) {\r\n      const size = ~~(this.vscrollParent.direction === 'vertical' ? height : width)\r\n      if (size && this.size !== size) {\r\n        if (this.vscrollParent.$_undefinedMap[this.id]) {\r\n          this.vscrollParent.$_undefinedSizes--\r\n          this.vscrollParent.$_undefinedMap[this.id] = undefined\r\n        }\r\n        this.$set(this.vscrollData.sizes, this.id, size)\r\n        this.$set(this.vscrollData.validSizes, this.id, true)\r\n        if (this.emitResize) this.$emit('resize', this.id)\r\n      }\r\n    },\r\n\r\n    observeSize () {\r\n      if (!this.vscrollResizeObserver || !this.$el.parentNode) return\r\n      this.vscrollResizeObserver.observe(this.$el.parentNode)\r\n      this.$el.parentNode.addEventListener('resize', this.onResize)\r\n    },\r\n\r\n    unobserveSize () {\r\n      if (!this.vscrollResizeObserver) return\r\n      this.vscrollResizeObserver.unobserve(this.$el.parentNode)\r\n      this.$el.parentNode.removeEventListener('resize', this.onResize)\r\n    },\r\n\r\n    onResize (event) {\r\n      const { width, height } = event.detail.contentRect\r\n      this.applySize(width, height)\r\n    },\r\n  },\r\n\r\n  render (h) {\r\n    return h(this.tag, this.$slots.default)\r\n  },\r\n}\r\n</script>\r\n","import Vue from 'vue'\r\n\r\nexport default function ({\r\n  idProp = vm => vm.item.id,\r\n} = {}) {\r\n  const store = {}\r\n  const vm = new Vue({\r\n    data () {\r\n      return {\r\n        store,\r\n      }\r\n    },\r\n  })\r\n\r\n  // @vue/component\r\n  return {\r\n    data () {\r\n      return {\r\n        idState: null,\r\n      }\r\n    },\r\n\r\n    created () {\r\n      this.$_id = null\r\n      if (typeof idProp === 'function') {\r\n        this.$_getId = () => idProp.call(this, this)\r\n      } else {\r\n        this.$_getId = () => this[idProp]\r\n      }\r\n      this.$watch(this.$_getId, {\r\n        handler (value) {\r\n          this.$nextTick(() => {\r\n            this.$_id = value\r\n          })\r\n        },\r\n        immediate: true,\r\n      })\r\n      this.$_updateIdState()\r\n    },\r\n\r\n    beforeUpdate () {\r\n      this.$_updateIdState()\r\n    },\r\n\r\n    methods: {\r\n      /**\r\n       * Initialize an idState\r\n       * @param {number|string} id Unique id for the data\r\n       */\r\n      $_idStateInit (id) {\r\n        const factory = this.$options.idState\r\n        if (typeof factory === 'function') {\r\n          const data = factory.call(this, this)\r\n          vm.$set(store, id, data)\r\n          this.$_id = id\r\n          return data\r\n        } else {\r\n          throw new Error('[mixin IdState] Missing `idState` function on component definition.')\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Ensure idState is created and up-to-date\r\n       */\r\n      $_updateIdState () {\r\n        const id = this.$_getId()\r\n        if (id == null) {\r\n          console.warn(`No id found for IdState with idProp: '${idProp}'.`)\r\n        }\r\n        if (id !== this.$_id) {\r\n          if (!store[id]) {\r\n            this.$_idStateInit(id)\r\n          }\r\n          this.idState = store[id]\r\n        }\r\n      },\r\n    },\r\n  }\r\n}\r\n","import config from './config'\r\n\r\nimport RecycleScroller from './components/RecycleScroller.vue'\r\nimport DynamicScroller from './components/DynamicScroller.vue'\r\nimport DynamicScrollerItem from './components/DynamicScrollerItem.vue'\r\n\r\nexport { default as IdState } from './mixins/IdState'\r\n\r\nexport {\r\n  RecycleScroller,\r\n  DynamicScroller,\r\n  DynamicScrollerItem,\r\n}\r\n\r\nfunction registerComponents (Vue, prefix) {\r\n  Vue.component(`${prefix}recycle-scroller`, RecycleScroller)\r\n  Vue.component(`${prefix}RecycleScroller`, RecycleScroller)\r\n  Vue.component(`${prefix}dynamic-scroller`, DynamicScroller)\r\n  Vue.component(`${prefix}DynamicScroller`, DynamicScroller)\r\n  Vue.component(`${prefix}dynamic-scroller-item`, DynamicScrollerItem)\r\n  Vue.component(`${prefix}DynamicScrollerItem`, DynamicScrollerItem)\r\n}\r\n\r\nconst plugin = {\r\n  // eslint-disable-next-line no-undef\r\n  version: VERSION,\r\n  install (Vue, options) {\r\n    const finalOptions = Object.assign({}, {\r\n      installComponents: true,\r\n      componentsPrefix: '',\r\n    }, options)\r\n\r\n    for (const key in finalOptions) {\r\n      if (typeof finalOptions[key] !== 'undefined') {\r\n        config[key] = finalOptions[key]\r\n      }\r\n    }\r\n\r\n    if (finalOptions.installComponents) {\r\n      registerComponents(Vue, finalOptions.componentsPrefix)\r\n    }\r\n  },\r\n}\r\n\r\nexport default plugin\r\n\r\n// Auto-install\r\nlet GlobalVue = null\r\nif (typeof window !== 'undefined') {\r\n  GlobalVue = window.Vue\r\n} else if (typeof global !== 'undefined') {\r\n  GlobalVue = global.Vue\r\n}\r\nif (GlobalVue) {\r\n  GlobalVue.use(plugin)\r\n}\r\n"],"names":["itemsLimit","supportsPassive","window","opts","Object","defineProperty","get","addEventListener","e","props","items","type","Array","required","keyField","String","default","direction","validator","value","includes","listTag","itemTag","simpleArray","length","uid","name","components","ResizeObserver","directives","ObserveVisibility","disableTransform","Boolean","itemSize","Number","gridItems","undefined","itemSecondarySize","minItemSize","sizeField","typeField","buffer","pageMode","prerender","emitUpdate","skipHover","listClass","itemClass","data","pool","totalSize","ready","hoverKey","computed","sizes","accumulator","field","computedMinSize","current","i","l","size","$_computedMinItemSize","watch","updateVisibleItems","applyPageMode","handler","deep","created","$_startIndex","$_endIndex","$_views","Map","$_unusedViews","$_scrollDirty","$_lastUpdateScrollPosition","$_prerender","console","error","mounted","$nextTick","activated","lastPosition","scrollToPosition","beforeDestroy","removeListeners","methods","addView","index","item","key","view","position","nonReactive","id","used","configurable","push","unuseView","fake","unusedViews","nr","unusedPool","set","delete","handleResize","$emit","handleScroll","event","requestAnimationFrame","continuous","clearTimeout","$_refreshTimout","setTimeout","handleVisibilityChange","isVisible","entry","boundingClientRect","width","height","checkItem","checkPositionDiff","count","views","startIndex","endIndex","visibleStartIndex","visibleEndIndex","Math","min","scroll","getScroll","positionDiff","start","end","beforeSize","$refs","before","scrollHeight","after","afterSize","h","a","b","oldI","remainer","ceil","max","floor","config","itemsLimitError","$_continuous","clear","indexOf","unusedIndex","v","Error","pop","offset","$_sortTimer","sortViews","getListenerTarget","target","ScrollParent","$el","document","documentElement","body","el","isVertical","scrollState","bounds","getBoundingClientRect","boundsSize","top","left","innerHeight","innerWidth","scrollTop","clientHeight","scrollLeft","clientWidth","addListeners","listenerTarget","passive","removeEventListener","scrollToItem","viewport","scrollDirection","scrollDistance","viewportEl","tagName","scroller","scrollerPosition","log","sort","viewA","viewB","__vue_script__","script","RecycleScroller","provide","$_resizeObserver","entries","isArray","CustomEvent","detail","contentRect","dispatchEvent","vscrollData","vscrollParent","vscrollResizeObserver","inheritAttrs","active","validSizes","itemsWithSize","result","$_undefinedMap","listeners","$listeners","forceUpdate","immediate","next","prev","prevActiveTop","activeTop","beforeCreate","$_updates","$_undefinedSizes","deactivated","onScrollerResize","onScrollerVisible","force","getItemSize","scrollToBottom","$_scrollingToBottom","cb","inject","watchData","sizeDependencies","emitResize","tag","hasOwnProperty","finalActive","onDataUpdate","observeSize","unobserveSize","$_pendingVScrollUpdate","updateSize","$isServer","$_forceNextVScrollUpdate","updateWatchData","k","$watch","$on","onVscrollUpdate","onVscrollUpdateSize","$off","$_pendingSizeUpdate","computeSize","$_watchData","offsetWidth","offsetHeight","applySize","$set","parentNode","observe","onResize","unobserve","render","$slots","idProp","vm","store","Vue","idState","$_id","$_getId","call","$_updateIdState","beforeUpdate","$_idStateInit","factory","$options","warn","registerComponents","prefix","component","DynamicScroller","DynamicScrollerItem","plugin","version","VERSION","install","options","finalOptions","assign","installComponents","componentsPrefix","GlobalVue","global","use"],"mappings":"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"}